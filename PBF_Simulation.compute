#pragma kernel Pre_solve
#pragma kernel Calculate_lambda
#pragma kernel Calculate_delta_p
#pragma kernel Update_constrain_pos
#pragma kernel Post_solve
#pragma kernel Calculate_f_pressure
#pragma kernel Apply_f_pressure
#pragma kernel Histogram
#pragma kernel Scan
#pragma kernel Scan_per_block_combine
#pragma kernel Scatter

#define THREAD_GROUP_SIZE_X 256
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1
#define h 1.0f
#define h_3 (h * h * h)
#define h_6 (h_3 * h_3)
#define h_9 (h_6 * h_3)
#define PI 3.14159
#define poly6Coefficient (315.0f / (64.0f * PI * h_9))
#define spikeCoefficient (-45.0f / (PI * h_6))
struct particle
{
    float3 velocity;
    float lambda;
    float3 position;
    int flag;
    float3 acceleration;
    float density;
    float3 prePosition;
    int padding;
    float3 delta_p;
    int padding2;
};
struct MeshProperties
{
    float4x4 mat;
    float4 color;
};

RWStructuredBuffer<particle> particles;
RWStructuredBuffer<particle> unsortedParticles;
RWStructuredBuffer<MeshProperties> transformation;
RWStructuredBuffer<int> globalHistogram;
RWStructuredBuffer<int> globalHistogramPrefixSum;
RWStructuredBuffer<float3> hapticOutputForce;
//just for scan input buffer
RWStructuredBuffer<int> scanInput;
RWStructuredBuffer<int> scanBlockSum;
float3 hapticIntPutForce;
float deltaTime;
float inverseRestDensity;
int population;
//bin infos
int min_x, max_x;
int min_y, max_y;
int min_z, max_z;
int num_bin_x;
int num_bin_y;
int num_bin_z;

int numOfParticles;
float3 hapticInteractionPoint;
float spacing;
groupshared int force_x;
groupshared int sharedArrayScan[THREAD_GROUP_SIZE_X * 2];

int find_bin(float3 p)
{
    int x = clamp(int((p.x - min_x) / spacing), 0, num_bin_x - 1);
    int y = clamp(int((p.y - min_y) / spacing), 0, num_bin_y - 1);
    int z = clamp(int((p.z - min_z) / spacing), 0, num_bin_z - 1);

    return num_bin_x * num_bin_y * z + num_bin_x * y + x;
}
float Poly6Kernel(float3 p)
{
    float d = h * h - dot(p, p);
    if (d < 0)
        return 0.0f;
    else
    {
        return poly6Coefficient * d * d * d;
    }
}
float Scorr(float3 p)
{
    float upper = Poly6Kernel(p);
    float3 v = 0.1 * h * float3(1, 0, 0);
    float low = Poly6Kernel(v);
    float m = upper / low;
    return -1 * m * m * m * m;
}
float3 SpikeKernelGradient(float3 p)
{
    float d = h - length(p);
    if (d < 0 || length(p) == 0)
        return float3(0.0f,0.0f,0.0f);
    else
    {
        return (spikeCoefficient * d * d) / (length(p)) * normalize(p);
    }

}
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void Pre_solve(uint3 id : SV_DispatchThreadID)
{
    uint global_index = id.x;
    particles[global_index].prePosition = particles[global_index].position;
    particles[global_index].velocity += particles[global_index].acceleration * deltaTime;
    particles[global_index].position += particles[global_index].velocity * deltaTime;
    particles[global_index].acceleration = float3(0,-10.0f,0);
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void Histogram(uint3 id : SV_DispatchThreadID)
{
    uint global_index = id.x;
    if (global_index >= numOfParticles)
        return;
    int binIndex = find_bin(unsortedParticles[global_index].position);
    InterlockedAdd(globalHistogram[binIndex], 1, unsortedParticles[global_index].flag);
    unsortedParticles[global_index].padding = binIndex;
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void Scatter(uint3 id : SV_DispatchThreadID)
{
    uint global_index = id.x;
    int binIndex = find_bin(unsortedParticles[global_index].position);
    
    uint globalStartIndex = globalHistogram[binIndex];
    
    particles[globalStartIndex + unsortedParticles[global_index].flag] = unsortedParticles[global_index];
    //check if sorted
    //particles[globalStartIndex + unsortedParticles[global_index].flag].flag = globalStartIndex + unsortedParticles[global_index].flag;
    //unsortedParticles[global_index].flag = particles[globalStartIndex + unsortedParticles[global_index].flag].flag;
}
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void Calculate_lambda(uint3 id : SV_DispatchThreadID)
{
    uint global_index = id.x;
    float density = 0.0f;
    float w = 0.0f;
    float3 gradient = float3(0.0f, 0.0f, 0.0f);
    
    int binIndexMinX = clamp((particles[global_index].position - float3(spacing, 0, 0)).x / spacing, 0, 19);
    int binIndexMaxX = clamp((particles[global_index].position + float3(spacing, 0, 0)).x / spacing, 0, 19);
    
    int binIndexMinY = clamp((particles[global_index].position - float3(0, spacing, 0)).y / spacing, 0, 19);
    int binIndexMaxY = clamp((particles[global_index].position + float3(0, spacing, 0)).y / spacing, 0, 19);
    
    int binIndexMinZ = clamp((particles[global_index].position - float3(0, 0, spacing)).z / spacing, 0, 19);
    int binIndexMaxZ = clamp((particles[global_index].position + float3(0, 0, spacing)).z / spacing, 0, 19);
    
    //particles[global_index].flag = 0;
    for (int k = binIndexMinZ; k <= binIndexMaxZ; k++)
    {
        for (int j = binIndexMinY; j <= binIndexMaxY; j++)
        {
            for (int i = binIndexMinX; i <= binIndexMaxX; i++)
            {
                
                int binIndex = num_bin_x * num_bin_y * k + num_bin_x * j + i;
                int start = globalHistogram[binIndex];
                int end = globalHistogram[binIndex + 1];
                
                for (int p = start; p < end; p++)
                {
                    float3 v = particles[global_index].position - particles[p].position;
                    if (dot(v, v) <= 1.0f)
                    {
                        density += Poly6Kernel(v);
                        float3 tmp = SpikeKernelGradient(v);
                        gradient -= tmp * inverseRestDensity;
                        w += inverseRestDensity * inverseRestDensity * dot(tmp, tmp);
                    }
                }
                
            }

        }

    }
   
    gradient *= inverseRestDensity;
    float C = density * inverseRestDensity - 1.0f;
    float lambda = -C / (w + dot(gradient, gradient) + 200);
    
    particles[global_index].lambda = C;
    particles[global_index].density = density;
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void Calculate_delta_p(uint3 id : SV_DispatchThreadID)
{
    uint global_index = id.x;
    float3 delta_p = float3(0.0f, 0.0f, 0.0f);
    
    int binIndexMinX = clamp((particles[global_index].position - float3(spacing, 0, 0)).x / spacing, 0, 19);
    int binIndexMaxX = clamp((particles[global_index].position + float3(spacing, 0, 0)).x / spacing, 0, 19);
    
    int binIndexMinY = clamp((particles[global_index].position - float3(0, spacing, 0)).y / spacing, 0, 19);
    int binIndexMaxY = clamp((particles[global_index].position + float3(0, spacing, 0)).y / spacing, 0, 19);
    
    int binIndexMinZ = clamp((particles[global_index].position - float3(0, 0, spacing)).z / spacing, 0, 19);
    int binIndexMaxZ = clamp((particles[global_index].position + float3(0, 0, spacing)).z / spacing, 0, 19);
    
    //particles[global_index].flag = 0;
    
    for (int k = binIndexMinZ; k <= binIndexMaxZ; k++)
    {
        for (int j = binIndexMinY; j <= binIndexMaxY; j++)
        {
            for (int i = binIndexMinX; i <= binIndexMaxX; i++)
            {
                int binIndex = num_bin_x * num_bin_y * k + num_bin_x * j + i;
                int start = globalHistogram[binIndex];
                int end = globalHistogram[binIndex + 1];
                
                for (int p = start; p < end; p++)
                {
                    float3 v = particles[global_index].position - particles[p].position;
                    if (dot(v, v) <= 1.0f)
                    {
                        float s_corr = Scorr(v);
                        float3 gradient = SpikeKernelGradient(v);
                        delta_p += inverseRestDensity * (particles[global_index].lambda + s_corr) * gradient;
                        
                        //particles[global_index].flag += 1;
                        
                    }
                }
                
            }

        }

    }
    particles[global_index].padding == 0;
    
    float3 pos = particles[global_index].position + delta_p;
    
    float offset = 0.0f;
    
    /*
    if (dot(pos - float3(min_x, 0, 0), float3(1, 0, 0)) < 0)
    {
        pos -= dot(pos - float3(min_x, 0, 0), float3(1, 0, 0)) * float3(1, 0, 0);
        //particles[global_index].velocity.x += 10.0f;
    }
    
    if (dot(pos - float3(max_x, 0, 0), float3(-1, 0, 0)) < 0)
    {
        pos -= dot(pos - float3(max_x, 0, 0), float3(-1, 0, 0)) * float3(-1, 0, 0);
        //particles[global_index].velocity.x -= 5.0f;
        particles[global_index].padding == 1;
    }
    
    if (dot(pos - float3(0, min_y, 0), float3(0, 1, 0)) < 0)
        pos -= dot(pos - float3(0, min_y, 0), float3(0, 1, 0)) * float3(0, 1, 0);
    
    if (dot(pos - float3(0, max_y, 0), float3(0, -1, 0)) < 0)
        pos -= dot(pos - float3(0, max_y, 0), float3(0, -1, 0)) * float3(0, -1, 0);
    
    */
    
    pos.x = clamp(pos.x, min_x - offset, max_x + offset);
    pos.y = clamp(pos.y, min_y - offset, max_y + offset);
    pos.z = clamp(pos.z, min_z - offset, max_z + offset);
    
    particles[global_index].delta_p = pos - particles[global_index].position;
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void Update_constrain_pos(uint3 id : SV_DispatchThreadID)
{
    uint global_index = id.x;
    float3 pos = particles[global_index].position + particles[global_index].delta_p;
    particles[global_index].position = pos;
    
    int renderFlag = 0;
    float offset = 0.2;
    
    renderFlag = (pos.x > max_x - offset) || (pos.x < min_x + offset) || (pos.y < min_y) || (pos.z < min_z + offset) || (pos.z > max_z - offset);
    
    
    particles[global_index].padding = renderFlag;
}
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void Post_solve(uint3 id : SV_DispatchThreadID)
{
    uint global_index = id.x;
    
    float3 v = 1.0 * (particles[global_index].position - particles[global_index].prePosition) / deltaTime;
    float speed = length(v);
    if(speed > 5.0f)
        v = 5.0f * normalize(v);
    
    particles[global_index].velocity = v;
    
    unsortedParticles[global_index] = particles[global_index];
    
    transformation[global_index].mat[0][3] = particles[global_index].position[0];
    transformation[global_index].mat[1][3] = particles[global_index].position[1];
    transformation[global_index].mat[2][3] = particles[global_index].position[2];
    
    
    if (particles[global_index].padding == 1)
    {
        transformation[global_index].mat[0][3] = 100000000;
        transformation[global_index].mat[1][3] = 10000000;
        transformation[global_index].mat[2][3] = 10000000;
    }
    
    
    //reset to 0
    //globalHistogramPrefixSum[global_index] = 0;
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void Calculate_f_pressure(uint3 id : SV_DispatchThreadID)
{
    uint global_index = id.x;
    float3 pressure_force = float3(0,0,0);
    float density = 0.0f;
    float3 gradient = float3(0.0f, 0.0f, 0.0f);
    float3 v = particles[global_index].position - hapticInteractionPoint;
    hapticOutputForce[0] = float3(0, 0, 0);
    ////calculate the output force
    if (dot(v, v) <= 1.0f)
    {
        hapticOutputForce[0] += 0.4 * v;//particles[global_index].position;
        //InterlockedAdd(globalHistogram[binIndex], 1, unsortedParticles[global_index].flag);
    }
    
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void Apply_f_pressure(uint3 id : SV_DispatchThreadID)
{
    uint global_index = id.x;
    
    float3 v = particles[global_index].position - hapticInteractionPoint;
    particles[global_index].acceleration = 3 * (dot(v, v) <= 1.0f) * hapticIntPutForce + (dot(v, v) > 1.0f) * float3(0, -10, 0);
    
    globalHistogram[global_index] = 0;
}